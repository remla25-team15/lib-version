name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  repository_dispatch:
    types: [version-update]

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Parse version info
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            VERSION=${{ github.event.client_payload.version }}
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION"
          MAJOR=$(echo "$VERSION" | cut -d . -f 1)
          MINOR=$(echo "$VERSION" | cut -d . -f 2)
          PATCH=$(echo "$VERSION" | cut -d . -f 3)
          echo "version_major=$MAJOR" >> $GITHUB_ENV
          echo "version_minor=$MINOR" >> $GITHUB_ENV
          echo "version_patch=$PATCH" >> $GITHUB_ENV

      - name: Create tag if missing (repository_dispatch only)
        if: github.event_name == 'repository_dispatch'
        run: |
          git fetch --tags
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists."
          else
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git tag "$VERSION"
            git push origin "$VERSION"
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install Build tools
        run: pip install build

      - name: Build the package
        run: python -m build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libversion-dist
          path: dist/

  create-release:
    needs: build
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    if: github.event_name == 'repository_dispatch' && github.event.client_payload.release == true

    steps:
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.event.client_payload.version }}
          release_name: Release ${{ github.event.client_payload.version }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.REMLA_GITHUB_TOKEN }}